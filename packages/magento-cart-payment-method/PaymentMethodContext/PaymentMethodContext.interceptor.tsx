/* hash:814246879 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext */
import { PaymentMethodContextProvider as PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProvider } from '@graphcommerce/google-datalayer/plugins/GoogleDatalayerPaymentMethodContextProvider'
/** @see {@link file://./PaymentMethodContext.tsx} for source of original */
/** SOURCE_START */
import { useApolloClient } from '@graphcommerce/graphql'
import { useCartQuery, useClearCurrentCartId } from '@graphcommerce/magento-cart'
import { PaymentMethodContextProvider as PaymentMethodContextProviderAddIncludedMethods } from '@graphcommerce/magento-payment-included/plugins/AddIncludedMethods'
import { filterNonNullableKeys } from '@graphcommerce/next-ui'
import { useEventCallback } from '@mui/material'
import { useRouter } from 'next/router'
import React, { useEffect, useMemo, useState } from 'react'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import type {
  ExpandPaymentMethodsContext,
  PaymentMethod,
  PaymentMethodModules,
  PaymentModule,
} from '../Api/PaymentMethod'
import type { PaymentMethodContextFragment } from '../Api/PaymentMethodContext.gql'
import { GetPaymentMethodContextDocument } from './GetPaymentMethodContext.gql'
import type { PaymentMethodContextType } from './paymentMethodContextType'
import { paymentMethodContext } from './paymentMethodContextType'

export type PaymentMethodContextProviderProps = {
  modules?: PaymentMethodModules
  children: React.ReactNode
  successUrl?: string
  onSuccess?: (
    orderNumber: string,
    cart?: PaymentMethodContextFragment | null,
  ) => Promise<void> | void
}
export function PaymentMethodContextProviderOriginal(props: PaymentMethodContextProviderProps) {
  const { modules = {}, successUrl = '/checkout/success', onSuccess, children } = props
  const context = useCartQuery(GetPaymentMethodContextDocument)
  const client = useApolloClient()
  const clearCurrentCartId = useClearCurrentCartId()
  const { push } = useRouter()
  const cartContext: ExpandPaymentMethodsContext = useMemo(
    () => ({
      ...context?.data?.cart,
      client,
    }),
    [client, context?.data?.cart],
  )
  const onSuccessCb: NonNullable<PaymentMethodContextType['onSuccess']> = useEventCallback(
    async (orderNumber) => {
      await onSuccess?.(orderNumber, context.data?.cart)
      await push({
        pathname: successUrl,
        query: {
          order_number: orderNumber,
          cart_id: context.data?.cart?.id,
        },
      })
      clearCurrentCartId()
    },
  )
  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod>()
  const [selectedModule, setSelectedModule] = useState<PaymentModule>()
  const availableMethods = useMemo(() => {
    const allMethods = filterNonNullableKeys(cartContext?.available_payment_methods)
    const free = allMethods.find((method) => method?.code === 'free')
    return free ? [free] : allMethods
  }, [cartContext?.available_payment_methods])
  const [methods, setMethods] = useState<PaymentMethod[]>(
    availableMethods.map((m) => ({
      ...m,
      code: `${m.code}_placeholder`,
      child: '',
    })),
  )
  useEffect(() => {
    if (!cartContext) return
    ;(async () => {
      const promises = availableMethods.map(async (method) =>
        method
          ? (modules[method.code]?.expandMethods?.(method, cartContext) ?? [
              {
                ...method,
                child: '',
              },
            ])
          : Promise.resolve([]),
      )
      const loaded = (await Promise.all(promises)).flat(1).sort((a) => (a.preferred ? 1 : 0))
      setMethods(loaded)
    })()
  }, [availableMethods, cartContext, modules])
  const value = useMemo(
    () => ({
      methods,
      selectedMethod,
      setSelectedMethod,
      modules,
      selectedModule,
      setSelectedModule,
      onSuccess: onSuccessCb,
    }),
    [methods, modules, onSuccessCb, selectedMethod, selectedModule],
  )
  return (
    <paymentMethodContext.Provider value={value}>
      {Object.entries(modules).map(([code, module]) =>
        module.PaymentHandler ? <module.PaymentHandler key={code} code={code} /> : null,
      )}
      {children}
    </paymentMethodContext.Provider>
  )
}

/** SOURCE_END */

type PaymentMethodContextProviderAddIncludedMethodsProps = OmitPrev<
  React.ComponentProps<typeof PaymentMethodContextProviderAddIncludedMethods>,
  'Prev'
>

const PaymentMethodContextProviderAddIncludedMethodsInterceptor = (
  props: PaymentMethodContextProviderAddIncludedMethodsProps,
) => (
  <PaymentMethodContextProviderAddIncludedMethods
    {...props}
    Prev={PaymentMethodContextProviderOriginal}
  />
)

type PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProviderProps =
  PaymentMethodContextProviderAddIncludedMethodsProps &
    OmitPrev<
      React.ComponentProps<
        typeof PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProvider
      >,
      'Prev'
    >

const PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProviderInterceptor = (
  props: PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProviderProps,
) => (
  <PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProvider
    {...props}
    Prev={PaymentMethodContextProviderAddIncludedMethodsInterceptor}
  />
)

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./PaymentMethodContext.tsx} for original source file
 * @see {PaymentMethodContextProviderAddIncludedMethods} for source of applied plugin
 * @see {PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProvider} for source of applied plugin
 */
export const PaymentMethodContextProvider =
  PaymentMethodContextProviderGoogleDatalayerPaymentMethodContextProviderInterceptor
