/* hash:633878811 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-cart-payment-method/PaymentMethodButton/PaymentMethodButton */
import { PaymentMethodButton as PaymentMethodButtonGoogleDatalayerPaymentMethodButton } from '@graphcommerce/google-datalayer/plugins/GoogleDatalayerPaymentMethodButton'
/** @see {@link file://./PaymentMethodButton.tsx} for source of original */
/** SOURCE_START */
import { ApolloCartErrorSnackbar } from '@graphcommerce/magento-cart'
import type { LinkOrButtonProps } from '@graphcommerce/next-ui'
import { LinkOrButton } from '@graphcommerce/next-ui'
import type {
  ComposedSubmitProps,
  ComposedSubmitRenderComponentProps,
} from '@graphcommerce/react-hook-form'
import { ComposedSubmit } from '@graphcommerce/react-hook-form'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import { usePaymentMethodContext } from '../PaymentMethodContext/paymentMethodContextType'

export type PaymentMethodButtonProps = LinkOrButtonProps & {
  display?: 'inline' | 'block'
} & Pick<ComposedSubmitProps, 'onSubmitSuccessful'>
function PaymentMethodButtonRenderer(
  props: {
    buttonProps: LinkOrButtonProps
  } & ComposedSubmitRenderComponentProps,
) {
  const { buttonProps, error, buttonState, submit } = props
  const { selectedMethod, selectedModule } = usePaymentMethodContext(true) ?? {}
  const PaymentButton = selectedModule?.PaymentButton
  return (
    <>
      {!PaymentButton || !selectedMethod?.code ? (
        <LinkOrButton
          {...buttonProps}
          onClick={submit}
          loading={buttonState.isSubmitting || (buttonState.isSubmitSuccessful && !error)}
        >
          {buttonProps.children}
        </LinkOrButton>
      ) : (
        <PaymentButton
          {...selectedMethod}
          buttonProps={{
            ...buttonProps,
            onClick: submit,
            loading: buttonState.isSubmitting || (buttonState.isSubmitSuccessful && !error),
          }}
        />
      )}
    </>
  )
}
export function PaymentMethodButtonOriginal(props: PaymentMethodButtonProps) {
  const { display, onSubmitSuccessful, ...buttonProps } = props
  return (
    <ComposedSubmit
      onSubmitSuccessful={onSubmitSuccessful}
      render={({ submit, buttonState, error }) => {
        const errorVal = buttonState.isSubmitting ? undefined : error
        const button = (
          <PaymentMethodButtonRenderer
            buttonProps={buttonProps}
            submit={submit}
            buttonState={buttonState}
            error={error}
          />
        )
        return display === 'inline' ? (
          button
        ) : (
          <>
            {button}
            <ApolloCartErrorSnackbar key='error' error={errorVal} />
          </>
        )
      }}
    />
  )
}

/** SOURCE_END */

type PaymentMethodButtonGoogleDatalayerPaymentMethodButtonProps = OmitPrev<
  React.ComponentProps<typeof PaymentMethodButtonGoogleDatalayerPaymentMethodButton>,
  'Prev'
>

const PaymentMethodButtonGoogleDatalayerPaymentMethodButtonInterceptor = (
  props: PaymentMethodButtonGoogleDatalayerPaymentMethodButtonProps,
) => (
  <PaymentMethodButtonGoogleDatalayerPaymentMethodButton
    {...props}
    Prev={PaymentMethodButtonOriginal}
  />
)

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./PaymentMethodButton.tsx} for original source file
 * @see {PaymentMethodButtonGoogleDatalayerPaymentMethodButton} for source of applied plugin
 */
export const PaymentMethodButton = PaymentMethodButtonGoogleDatalayerPaymentMethodButtonInterceptor
