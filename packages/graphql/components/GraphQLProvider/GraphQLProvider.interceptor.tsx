/* hash:602045529 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/graphql/components/GraphQLProvider/GraphQLProvider */
import { GraphQLProvider as GraphQLProviderMagentoCartGraphqlProvider } from '@graphcommerce/magento-cart/plugins/MagentoCartGraphqlProvider'
import { GraphQLProvider as GraphQLProviderMagentoCustomerGraphqlProvider } from '@graphcommerce/magento-customer/plugins/MagentoCustomerGraphqlProvider'
import { GraphQLProvider as GraphQLProviderXMagentoCacheIdGraphQLProvider } from '@graphcommerce/magento-customer/plugins/XMagentoCacheIdGraphQLProvider'
/** @see {@link file://./GraphQLProvider.tsx} for source of original */
/** SOURCE_START */
import { useStorefrontConfig } from '@graphcommerce/next-ui/hooks/useStorefrontConfig'
import type { DefaultOptions, NormalizedCacheObject } from '@apollo/client'
import { ApolloClient, ApolloLink, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'
import type { AppProps } from 'next/app'
import { useCallback, useEffect, useRef, useState } from 'react'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import type { ApolloClientConfig, ApolloClientConfigInput, PreviewConfig } from '../../config'
import { graphqlConfig } from '../../config'
import fragments from '../../generated/fragments.json'
import { createCacheReviver } from './createCacheReviver'
import { errorLink } from './errorLink'
import { measurePerformanceLink } from './measurePerformanceLink'
import { mergeTypePolicies } from './typePolicies'

export const globalApolloClient: {
  current: ApolloClient<NormalizedCacheObject> | null
} = {
  current: null,
}
export type GraphQLProviderProps = AppProps &
  Omit<ApolloClientConfigInput, 'storefront'> & {
    children: React.ReactNode
  }
export function GraphQLProviderOriginal(props: GraphQLProviderProps) {
  const { children, links, migrations, policies, pageProps, router } = props
  const state = (
    pageProps as {
      apolloState?: NormalizedCacheObject
    }
  ).apolloState
  const stateRef = useRef(state)
  const storefront = useStorefrontConfig()
  const conf = graphqlConfig({
    links,
    migrations,
    policies,
    storefront,
    preview: router.isPreview,
  })
  const config = useRef<ApolloClientConfig>(conf)
  config.current = conf
  const createCache = useCallback(
    () =>
      new InMemoryCache({
        possibleTypes: fragments.possibleTypes,
        typePolicies: mergeTypePolicies(config.current.policies),
      }),
    [],
  )
  const [client] = useState(() => {
    const link = ApolloLink.from([
      ...(typeof window === 'undefined' ? [errorLink, measurePerformanceLink] : []),
      ...config.current.links,
      new HttpLink({
        uri: '/api/graphql',
        credentials: 'same-origin',
      }),
    ])
    const cache = createCache()
    if (stateRef.current) cache.restore(stateRef.current)
    const ssrMode = typeof window === 'undefined'
    return new ApolloClient({
      link,
      cache,
      name: 'web',
      ssrMode,
      defaultOptions: {
        preview: {
          preview: router.isPreview,
        } as PreviewConfig,
      } as DefaultOptions,
    })
  })
  useEffect(() => {
    createCacheReviver(client, createCache, config.current, state)
  }, [client, createCache, state])
  globalApolloClient.current = client
  return <ApolloProvider client={globalApolloClient.current}>{children}</ApolloProvider>
}

/** SOURCE_END */

type GraphQLProviderMagentoCustomerGraphqlProviderProps = OmitPrev<
  React.ComponentProps<typeof GraphQLProviderMagentoCustomerGraphqlProvider>,
  'Prev'
>

const GraphQLProviderMagentoCustomerGraphqlProviderInterceptor = (
  props: GraphQLProviderMagentoCustomerGraphqlProviderProps,
) => <GraphQLProviderMagentoCustomerGraphqlProvider {...props} Prev={GraphQLProviderOriginal} />

type GraphQLProviderXMagentoCacheIdGraphQLProviderProps =
  GraphQLProviderMagentoCustomerGraphqlProviderProps &
    OmitPrev<React.ComponentProps<typeof GraphQLProviderXMagentoCacheIdGraphQLProvider>, 'Prev'>

const GraphQLProviderXMagentoCacheIdGraphQLProviderInterceptor = (
  props: GraphQLProviderXMagentoCacheIdGraphQLProviderProps,
) => (
  <GraphQLProviderXMagentoCacheIdGraphQLProvider
    {...props}
    Prev={GraphQLProviderMagentoCustomerGraphqlProviderInterceptor}
  />
)

type GraphQLProviderMagentoCartGraphqlProviderProps =
  GraphQLProviderXMagentoCacheIdGraphQLProviderProps &
    OmitPrev<React.ComponentProps<typeof GraphQLProviderMagentoCartGraphqlProvider>, 'Prev'>

const GraphQLProviderMagentoCartGraphqlProviderInterceptor = (
  props: GraphQLProviderMagentoCartGraphqlProviderProps,
) => (
  <GraphQLProviderMagentoCartGraphqlProvider
    {...props}
    Prev={GraphQLProviderXMagentoCacheIdGraphQLProviderInterceptor}
  />
)

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./GraphQLProvider.tsx} for original source file
 * @see {GraphQLProviderMagentoCustomerGraphqlProvider} for source of applied plugin
 * @see {GraphQLProviderXMagentoCacheIdGraphQLProvider} for source of applied plugin
 * @see {GraphQLProviderMagentoCartGraphqlProvider} for source of applied plugin
 */
export const GraphQLProvider = GraphQLProviderMagentoCartGraphqlProviderInterceptor
