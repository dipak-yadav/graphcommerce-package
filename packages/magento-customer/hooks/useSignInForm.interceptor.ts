/* hash:717073135 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-customer/hooks/useSignInForm */

/** @see {@link file://./useSignInForm.ts} for source of original */
/** SOURCE_START */
import { useApolloClient } from '@graphcommerce/graphql'
import { useSignInForm as useSignInFormuseSignInFormMergeCart } from '@graphcommerce/magento-cart/plugins/useSignInFormMergeCart'
import { setCssFlag } from '@graphcommerce/next-ui'
import type { UseFormGraphQlOptions } from '@graphcommerce/react-hook-form'
import { useFormGqlMutation } from '@graphcommerce/react-hook-form'
import type { SignInMutation, SignInMutationVariables } from '../components/SignInForm/SignIn.gql'
import { SignInDocument } from '../components/SignInForm/SignIn.gql'
import { signOut } from '../components/SignOutForm/signOut'
import { CustomerDocument } from './Customer.gql'

type UseSignInFormProps = {
  email?: string
} & UseFormGraphQlOptions<SignInMutation, SignInMutationVariables>
export function useSignInFormOriginal({ email, ...options }: UseSignInFormProps) {
  const client = useApolloClient()
  return useFormGqlMutation(
    SignInDocument,
    {
      ...options,
      defaultValues: {
        email,
        ...options?.defaultValues,
      },
      onBeforeSubmit: async (values) => {
        const oldEmail = client.cache.readQuery({
          query: CustomerDocument,
        })?.customer?.email
        if (oldEmail && oldEmail !== email) signOut(client)
        const newValues = email
          ? {
              ...values,
              email,
            }
          : values
        return options?.onBeforeSubmit ? options.onBeforeSubmit(newValues) : newValues
      },
      onComplete: (...args) => {
        setCssFlag('private-query', true)
        return options.onComplete?.(...args)
      },
    },
    {
      errorPolicy: 'all',
    },
  )
}

/** SOURCE_END */

const logged: Set<string> = new Set()
const logOnce = (log: string, ...additional: unknown[]) => {
  if (logged.has(log)) return
  logged.add(log)
  console.warn(log, ...additional)
}

const useSignInFormuseSignInFormMergeCartInterceptor: typeof useSignInFormOriginal = (...args) => {
  return useSignInFormuseSignInFormMergeCart(useSignInFormOriginal, ...args)
}

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./useSignInForm.ts} for original source file
 * @see {useSignInFormuseSignInFormMergeCart} for source of applied plugin
 */
export const useSignInForm = useSignInFormuseSignInFormMergeCartInterceptor
