/* hash:446042132 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-product/components/ProductPagePrice/ProductPagePrice */

/** @see {@link file://./ProductPagePrice.tsx} for source of original */
/** SOURCE_START */
import { useWatch } from '@graphcommerce/ecommerce-ui'
import { PrivateQueryMask } from '@graphcommerce/graphql'
import { ProductPagePrice as ProductPagePriceConfigurableProductPagePrice } from '@graphcommerce/magento-product-configurable/plugins/ConfigurableProductPage/ConfigurableProductPagePrice'
import { Money } from '@graphcommerce/magento-store'
import { extendableComponent } from '@graphcommerce/next-ui'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import type { AddToCartItemSelector } from '../AddProductsToCart'
import { useFormAddProductsToCart } from '../AddProductsToCart'
import { getProductTierPrice } from './getProductTierPrice'
import type { ProductPagePriceFragment } from './ProductPagePrice.gql'
import type { UseCustomizableOptionPriceProps } from './useCustomizableOptionPrice'
import { useCustomizableOptionPrice } from './useCustomizableOptionPrice'

export type ProductPagePriceProps = {
  product: ProductPagePriceFragment
} & AddToCartItemSelector &
  UseCustomizableOptionPriceProps
const { classes } = extendableComponent('ProductPagePrice', [
  'finalPrice',
  'discountPrice',
] as const)
export function ProductPagePriceOriginal(props: ProductPagePriceProps) {
  const { product, index = 0 } = props
  const { control } = useFormAddProductsToCart()
  const quantity = useWatch({
    control,
    name: `cartItems.${index}.quantity`,
  })
  const price =
    getProductTierPrice(product, quantity) ?? product.price_range.minimum_price.final_price
  const priceValue = useCustomizableOptionPrice(props)
  const regularPrice = product.price_range.minimum_price.regular_price
  return (
    <>
      {regularPrice.value !== price.value && (
        <PrivateQueryMask
          component='span'
          className={classes.discountPrice}
          skeleton={{
            variant: 'text',
            sx: {
              width: '3em',
              transform: 'none',
            },
          }}
          sx={[
            {
              textDecoration: 'line-through',
              color: 'text.disabled',
              marginRight: '8px',
            },
          ]}
        >
          <Money {...regularPrice} />
        </PrivateQueryMask>
      )}
      <PrivateQueryMask
        component='span'
        skeleton={{
          variant: 'text',
          sx: {
            width: '3em',
            transform: 'none',
          },
        }}
        className={classes.finalPrice}
      >
        <Money {...price} value={priceValue} />
      </PrivateQueryMask>
    </>
  )
}

/** SOURCE_END */

type ProductPagePriceConfigurableProductPagePriceProps = OmitPrev<
  React.ComponentProps<typeof ProductPagePriceConfigurableProductPagePrice>,
  'Prev'
>

const ProductPagePriceConfigurableProductPagePriceInterceptor = (
  props: ProductPagePriceConfigurableProductPagePriceProps,
) => <ProductPagePriceConfigurableProductPagePrice {...props} Prev={ProductPagePriceOriginal} />

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./ProductPagePrice.tsx} for original source file
 * @see {ProductPagePriceConfigurableProductPagePrice} for source of applied plugin
 */
export const ProductPagePrice = ProductPagePriceConfigurableProductPagePriceInterceptor
