/* hash:1016726940 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-product/components/AddProductsToCart/AddProductsToCartForm */

/** @see {@link file://./AddProductsToCartForm.tsx} for source of original */
/** SOURCE_START */
import type { UseFormGraphQlOptions } from '@graphcommerce/ecommerce-ui'
import { AddProductsToCartForm as AddProductsToCartFormGoogleDatalayerAddProductsToCartForm } from '@graphcommerce/google-datalayer/plugins/GoogleDatalayerAddProductsToCartForm'
import type { ApolloQueryResult } from '@graphcommerce/graphql'
import { useApolloClient } from '@graphcommerce/graphql'
import type { CrosssellsQuery } from '@graphcommerce/magento-cart'
import { CrosssellsDocument, useFormGqlMutationCart } from '@graphcommerce/magento-cart'
import { AddProductsToCartForm as AddProductsToCartFormWishlistProductAddToCartFormPlugin } from '@graphcommerce/magento-wishlist/plugins/WishlistProductAddToCartFormPlugin'
import type { ErrorSnackbarProps, MessageSnackbarProps } from '@graphcommerce/next-ui'
import { nonNullable } from '@graphcommerce/next-ui'
import type { SxProps, Theme } from '@mui/material'
import { Box } from '@mui/material'
import { useRouter } from 'next/router'
import { useMemo, useRef } from 'react'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import type { AddProductsToCartMutation } from './AddProductsToCart.gql'
import { AddProductsToCartDocument } from './AddProductsToCart.gql'
import type { AddProductsToCartSnackbarProps } from './AddProductsToCartSnackbar'
import { AddProductsToCartSnackbar } from './AddProductsToCartSnackbar'
import { toUserErrors } from './toUserErrors'
import type { AddProductsToCartFields, RedirectType } from './useFormAddProductsToCart'
import { AddProductsToCartContext } from './useFormAddProductsToCart'

export type AddProductsToCartFormProps = {
  children: React.ReactNode
  sx?: SxProps<Theme>
  redirect?: RedirectType
  snackbarProps?: AddProductsToCartSnackbarProps
  errorSnackbar?: Omit<ErrorSnackbarProps, 'open'>
  successSnackbar?: Omit<MessageSnackbarProps, 'open' | 'action'>
  disableSuccessSnackbar?: boolean
} & UseFormGraphQlOptions<AddProductsToCartMutation, AddProductsToCartFields>
const name = 'AddProductsToCartForm'
export function AddProductsToCartFormOriginal(props: AddProductsToCartFormProps) {
  let {
    children,
    redirect,
    onComplete,
    sx,
    disableSuccessSnackbar,
    errorSnackbar,
    successSnackbar,
    snackbarProps,
    ...formProps
  } = props
  const router = useRouter()
  const client = useApolloClient()
  const crosssellsQuery = useRef<Promise<ApolloQueryResult<CrosssellsQuery>>>()
  if (typeof redirect !== 'undefined' && redirect !== 'added' && router.pathname === redirect)
    redirect = undefined
  const form = useFormGqlMutationCart<AddProductsToCartMutation, AddProductsToCartFields>(
    AddProductsToCartDocument,
    {
      ...formProps,
      onBeforeSubmit: async (variables) => {
        const variables2 = (await formProps.onBeforeSubmit?.(variables)) ?? variables
        if (variables2 === false) return false
        const { cartId, cartItems } = variables2
        const requestData = {
          cartId,
          cartItems: cartItems
            .filter((cartItem) => cartItem.sku && cartItem.quantity !== 0)
            .map(({ customizable_options, ...cartItem }) => {
              const options = Object.values(customizable_options ?? {})
                .flat(1)
                .filter(Boolean)
              return {
                ...cartItem,
                quantity: cartItem.quantity || 1,
                selected_options: [
                  ...(cartItem.selected_options ?? []).filter(Boolean),
                  ...options,
                ],
                entered_options: [
                  ...(cartItem.entered_options
                    ?.filter((option) => option?.value)
                    .filter(nonNullable)
                    .map((option) => ({
                      uid: option.uid,
                      value: `${option?.value}`,
                    })) ?? []),
                ],
              }
            }),
        }
        const sku = requestData.cartItems[requestData.cartItems.length - 1]?.sku
        if (sku && redirect === 'added') {
          crosssellsQuery.current = client.query({
            query: CrosssellsDocument,
            variables: {
              pageSize: 1,
              filters: {
                sku: {
                  eq: sku,
                },
              },
            },
          })
        }
        return requestData
      },
      onComplete: async (result, variables) => {
        await onComplete?.(result, variables)
        form.getValues('cartItems').forEach((item, index) => {
          if (item.sku) form.setValue(`cartItems.${index}.sku`, '')
        })
        if (toUserErrors(result.data).length || result.errors?.length || !redirect) return
        if (redirect === 'added') {
          await crosssellsQuery.current
          const method = router.pathname.startsWith('/checkout/added')
            ? router.replace
            : router.push
          await method({
            pathname: '/checkout/added',
            query: {
              sku: variables.cartItems.map((i) => i.sku),
            },
          })
        } else {
          await router.push({
            pathname: redirect,
          })
        }
      },
    },
  )
  const submit = form.handleSubmit(() => {})
  return (
    <AddProductsToCartContext.Provider
      value={useMemo(
        () => ({
          ...form,
          redirect,
        }),
        [form, redirect],
      )}
    >
      <Box component='form' onSubmit={submit} noValidate sx={sx} className={name}>
        {children}
      </Box>
      <AddProductsToCartSnackbar
        errorSnackbar={errorSnackbar}
        successSnackbar={successSnackbar}
        disableSuccessSnackbar={disableSuccessSnackbar}
        {...snackbarProps}
      />
    </AddProductsToCartContext.Provider>
  )
}

/** SOURCE_END */

type AddProductsToCartFormWishlistProductAddToCartFormPluginProps = OmitPrev<
  React.ComponentProps<typeof AddProductsToCartFormWishlistProductAddToCartFormPlugin>,
  'Prev'
>

const AddProductsToCartFormWishlistProductAddToCartFormPluginInterceptor = (
  props: AddProductsToCartFormWishlistProductAddToCartFormPluginProps,
) => (
  <AddProductsToCartFormWishlistProductAddToCartFormPlugin
    {...props}
    Prev={AddProductsToCartFormOriginal}
  />
)

type AddProductsToCartFormGoogleDatalayerAddProductsToCartFormProps =
  AddProductsToCartFormWishlistProductAddToCartFormPluginProps &
    OmitPrev<
      React.ComponentProps<typeof AddProductsToCartFormGoogleDatalayerAddProductsToCartForm>,
      'Prev'
    >

const AddProductsToCartFormGoogleDatalayerAddProductsToCartFormInterceptor = (
  props: AddProductsToCartFormGoogleDatalayerAddProductsToCartFormProps,
) => (
  <AddProductsToCartFormGoogleDatalayerAddProductsToCartForm
    {...props}
    Prev={AddProductsToCartFormWishlistProductAddToCartFormPluginInterceptor}
  />
)

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./AddProductsToCartForm.tsx} for original source file
 * @see {AddProductsToCartFormWishlistProductAddToCartFormPlugin} for source of applied plugin
 * @see {AddProductsToCartFormGoogleDatalayerAddProductsToCartForm} for source of applied plugin
 */
export const AddProductsToCartForm =
  AddProductsToCartFormGoogleDatalayerAddProductsToCartFormInterceptor
