/* hash:1066473216 */
/* eslint-disable */
/* This file is automatically generated for @graphcommerce/magento-product/components/ProductListItems/ProductListItemsBase */
import { ProductListItemsBase as ProductListItemsBaseGoogleDatalayerProductListItemsBase } from '@graphcommerce/google-datalayer/plugins/GoogleDatalayerProductListItemsBase'
/** @see {@link file://./ProductListItemsBase.tsx} for source of original */
/** SOURCE_START */
import { extendableComponent, LazyHydrate, RenderType, responsiveVal } from '@graphcommerce/next-ui'
import type { BoxProps, Breakpoint, Theme } from '@mui/material'
import { Box, useTheme } from '@mui/material'
import type { DistributedOmit as OmitPrev } from 'type-fest'
import { AddProductsToCartForm } from '../AddProductsToCart'
import type { ProductListItemProps } from '../ProductListItem/ProductListItem'
import type { ProductListItemsFragment } from './ProductListItems.gql'
import type { ProductListItemRenderer } from './renderer'

type ComponentState = {
  size?: 'normal' | 'small'
}
export type ColumnConfig = {
  maxWidth?: string
  gap?: string
  count: number
}
export type ColumnsConfig = Partial<Record<Breakpoint, ColumnConfig>>
export type ProductItemsGridProps = ProductListItemsFragment & {
  renderers: ProductListItemRenderer
  loadingEager?: number
  title: string
  sx?: BoxProps['sx']
  columns?: ((theme: Theme) => ColumnsConfig) | ColumnsConfig
  containerRef?: React.Ref<HTMLDivElement>
  children?: React.ReactNode
  maxWidth?: string
} & Pick<ProductListItemProps, 'onClick' | 'titleComponent'> &
  ComponentState
const slots = ['root'] as const
const name = 'ProductListItemsBase'
const { withState } = extendableComponent<ComponentState, typeof name, typeof slots>(name, slots)
export function ProductListItemsBaseOriginal(props: ProductItemsGridProps) {
  const {
    items,
    containerRef,
    sx = [],
    renderers,
    loadingEager = 0,
    size = 'normal',
    titleComponent,
    onClick,
    columns,
    children,
    maxWidth: maxWidthProp,
  } = props
  const theme = useTheme()
  const maxWidth = maxWidthProp ?? `calc(100vw - ${theme.page.horizontal} * 2)`
  const gap = theme.spacings.md
  let columnConfig = typeof columns === 'function' ? columns(theme) : columns
  if (!columnConfig && size === 'small') {
    columnConfig = {
      xs: {
        count: 2,
      },
      md: {
        count: 3,
      },
      lg: {
        count: 4,
        maxWidth: `${theme.breakpoints.values.xl}px`,
      },
    }
  }
  if (!columnConfig) {
    columnConfig = {
      xs: {
        count: 2,
      },
      md: {
        count: 3,
      },
      lg: {
        count: 4,
      },
    }
  }
  const classes = withState({
    size,
  })
  return (
    <AddProductsToCartForm>
      <Box
        ref={containerRef}
        className={classes.root}
        sx={[
          ...Object.entries(columnConfig).map(([key, column]) => ({
            [theme.breakpoints.up(key as Breakpoint)]: {
              gap: column.gap ?? gap,
              gridTemplateColumns: `repeat(${column.count}, 1fr)`,
            },
          })),
          {
            display: 'grid',
          },
          ...(Array.isArray(sx) ? sx : [sx]),
        ]}
      >
        {items?.map((item, idx) =>
          item ? (
            <LazyHydrate
              key={item.uid ?? ''}
              hydrated={loadingEager > idx ? true : undefined}
              height={responsiveVal(250, 500)}
            >
              <RenderType
                renderer={renderers}
                sizes={Object.fromEntries(
                  Object.entries(columnConfig).map(([key, column]) => {
                    const totalW = column.maxWidth ?? maxWidth
                    const columnGap = column.gap ?? gap
                    return [
                      theme.breakpoints.values[key as Breakpoint],
                      `calc((${totalW} - (${columnGap} * ${column.count - 1})) / ${column.count})`,
                    ]
                  }),
                )}
                {...item}
                loading={loadingEager > idx ? 'eager' : 'lazy'}
                titleComponent={titleComponent}
                onClick={onClick}
              />
            </LazyHydrate>
          ) : null,
        )}
        {children}
      </Box>
    </AddProductsToCartForm>
  )
}

/** SOURCE_END */

type ProductListItemsBaseGoogleDatalayerProductListItemsBaseProps = OmitPrev<
  React.ComponentProps<typeof ProductListItemsBaseGoogleDatalayerProductListItemsBase>,
  'Prev'
>

const ProductListItemsBaseGoogleDatalayerProductListItemsBaseInterceptor = (
  props: ProductListItemsBaseGoogleDatalayerProductListItemsBaseProps,
) => (
  <ProductListItemsBaseGoogleDatalayerProductListItemsBase
    {...props}
    Prev={ProductListItemsBaseOriginal}
  />
)

/**
 * Here you see the 'interceptor' that is applying all the configured plugins.
 *
 * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
 * original source changes.
 *
 * @see {@link file://./ProductListItemsBase.tsx} for original source file
 * @see {ProductListItemsBaseGoogleDatalayerProductListItemsBase} for source of applied plugin
 */
export const ProductListItemsBase =
  ProductListItemsBaseGoogleDatalayerProductListItemsBaseInterceptor
